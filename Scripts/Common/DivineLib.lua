load(Base64Decode("
local ABS,RAND,MIN,MAX,HUGE,FLOOR,CEIL,DEG,PI,SIN,COS,ASIN,COSIN= math.abs,math.random,math.min,math.max,math.huge,math.floor,math.ceil,math.deg,math.pi,math.sin,math.cos,math.asin,math.acos
local DEG_RAD_MULT = PI/180
local normalVec = Vector(0,1,0)
local sacLoadAttempts = 0
 
local dLibSave = GetSave("DivineLibSave")

local skins = {
  -- A
["Aatrox"]       = {"Classic", "Justicar", "Mecha", "Sea Hunter"},
["Ahri"]         = {"Classic", "Dynasty", "Midnight", "Foxfire", "Popstar", "Challenger", "Academy"},
["Akali"]        = {"Classic", "Stinger", "Crimson", "All-star", "Nurse", "Blood Moon", "Silverfang", "Headhunter"},
["Alistar"]      = {"Classic", "Black", "Golden", "Matador", "Longhorn", "Unchained", "Infernal", "Sweeper", "Marauder"},
["Amumu"]        = {"Classic", "Pharaoh", "Vancouver", "Emumu", "Re-Gifted", "Almost-Prom King", "Little Knight", "Sad Robot", "Surprise Party"},
["Anivia"]       = {"Classic", "Team Spirit", "Bird of Prey", "Noxus Hunter", "Hextech", "Blackfrost", "Prehistoric"},
["Annie"]        = {"Classic", "Goth", "Red Riding", "Annie in Wonderland", "Prom Queen", "Frostfire", "Reverse", "FrankenTibbers", "Panda", "Sweetheart"},
["Ashe"]         = {"Classic", "Freljord", "Sherwood Forest", "Woad", "Queen", "Amethyst", "Heartseeker", "Marauder"},
["Azir"]         = {"Classic", "Galactic", "Gravelord"},
  -- B  
["Bard"]         = {"Classic", "Elderwood", "Chroma Pack: Marigold", "Chroma Pack: Ivy", "Chroma Pack: Sage"},
["Blitzcrank"]   = {"Classic", "Rusty", "Goalkeeper", "Boom Boom", "Piltover Customs", "Definitely Not", "iBlitzcrank", "Riot", "Chroma Pack: Molten", "Chroma Pack: Cobalt", "Chroma Pack: Gunmetal", "Battle Boss"},
["Brand"]        = {"Classic", "Apocalyptic", "Vandal", "Cryocore", "Zombie", "Spirit Fire"},
["Braum"]        = {"Classic", "Dragonslayer", "El Tigre", "Lionheart"},
  -- C  
["Caitlyn"]      = {"Classic", "Resistance", "Sheriff", "Safari", "Arctic Warfare", "Officer", "Headhunter", "Chroma Pack: Pink", "Chroma Pack: Green", "Chroma Pack: Blue","Lunar"},
["Cassiopeia"]   = {"Classic", "Desperada", "Siren", "Mythic", "Jade Fang", "Chroma Pack: Day", "Chroma Pack: Dusk", "Chroma Pack: Night"},
["Chogath"]      = {"Classic", "Nightmare", "Gentleman", "Loch Ness", "Jurassic", "Battlecast Prime", "Prehistoric"},
["Corki"]        = {"Classic", "UFO", "Ice Toboggan", "Red Baron", "Hot Rod", "Urfrider", "Dragonwing", "Fnatic"},
  -- D
["Darius"]       = {"Classic", "Lord", "Bioforge", "Woad King", "Dunkmaster", "Chroma Pack: Black Iron", "Chroma Pack: Bronze", "Chroma Pack: Copper", "Academy"},
["Diana"]        = {"Classic", "Dark Valkyrie", "Lunar Goddess"},
["DrMundo"]      = {"Classic", "Toxic", "Mr. Mundoverse", "Corporate Mundo", "Mundo Mundo", "Executioner Mundo", "Rageborn Mundo", "TPA Mundo", "Pool Party"},
["Draven"]       = {"Classic", "Soul Reaver", "Gladiator", "Primetime", "Pool Party"},
  -- E 
["Ekko"]         = {"Classic", "Sandstorm", "Academy"},
["Elise"]        = {"Classic", "Death Blossom", "Victorious", "Blood Moon"},
["Evelynn"]      = {"Classic", "Shadow", "Masquerade", "Tango", "Safecracker"},
["Ezreal"]       = {"Classic", "Nottingham", "Striker", "Frosted", "Explorer", "Pulsefire", "TPA", "Debonair", "Ace of Spades"},
  -- F 
["FiddleSticks"] = {"Classic", "Spectral", "Union Jack", "Bandito", "Pumpkinhead", "Fiddle Me Timbers", "Surprise Party", "Dark Candy", "Risen"},
["Fiora"]        = {"Classic", "Royal Guard", "Nightraven", "Headmistress", "PROJECT"},
["Fizz"]         = {"Classic", "Atlantean", "Tundra", "Fisherman", "Void", "Chroma Pack: Orange", "Chroma Pack: Black", "Chroma Pack: Red", "Cottontail"},
  -- G  
["Galio"]        = {"Classic", "Enchanted", "Hextech", "Commando", "Gatekeeper", "Debonair"},
["Gangplank"]    = {"Classic", "Spooky", "Minuteman", "Sailor", "Toy Soldier", "Special Forces", "Sultan", "Captain"},
["Garen"]        = {"Classic", "Sanguine", "Desert Trooper", "Commando", "Dreadknight", "Rugged", "Steel Legion", "Chroma Pack: Garnet", "Chroma Pack: Plum", "Chroma Pack: Ivory", "Rogue Admiral"},
["Gnar"]         = {"Classic", "Dino", "Gentleman"},
["Gragas"]       = {"Classic", "Scuba", "Hillbilly", "Santa", "Gragas, Esq.", "Vandal", "Oktoberfest", "Superfan", "Fnatic", "Caskbreaker"},
["Graves"]       = {"Classic", "Hired Gun", "Jailbreak", "Mafia", "Riot", "Pool Party", "Cutthroat"},
  -- H 
["Hecarim"]      = {"Classic", "Blood Knight", "Reaper", "Headless", "Arcade", "Elderwood"},
["Heimerdinger"] = {"Classic", "Alien Invader", "Blast Zone", "Piltover Customs", "Snowmerdinger", "Hazmat"},
  -- I 
["Illaoi"]       = {"Classic", "Void Bringer"},
["Irelia"]       = {"Classic", "Nightblade", "Aviator", "Infiltrator", "Frostblade", "Order of the Lotus"},
  -- J 
["Janna"]        = {"Classic", "Tempest", "Hextech", "Frost Queen", "Victorious", "Forecast", "Fnatic"},
["JarvanIV"]     = {"Classic", "Commando", "Dragonslayer", "Darkforge", "Victorious", "Warring Kingdoms", "Fnatic"},
["Jax"]          = {"Classic", "The Mighty", "Vandal", "Angler", "PAX", "Jaximus", "Temple", "Nemesis", "SKT T1", "Chroma Pack: Cream", "Chroma Pack: Amber", "Chroma Pack: Brick", "Warden"},
["Jayce"]        = {"Classic", "Full Metal", "Debonair", "Forsaken"},
["Jinx"]         = {"Classic", "Mafia", "Firecracker", "Slayer"},
  -- K 
["Kalista"]      = {"Classic", "Blood Moon", "Championship"},
["Karma"]        = {"Classic", "Sun Goddess", "Sakura", "Traditional", "Order of the Lotus", "Warden"},
["Karthus"]      = {"Classic", "Phantom", "Statue of", "Grim Reaper", "Pentakill", "Fnatic", "Chroma Pack: Burn", "Chroma Pack: Blight", "Chroma Pack: Frostbite"},
["Kassadin"]     = {"Classic", "Festival", "Deep One", "Pre-Void", "Harbinger", "Cosmic Reaver"},
["Katarina"]     = {"Classic", "Mercenary", "Red Card", "Bilgewater", "Kitty Cat", "High Command", "Sandstorm", "Slay Belle", "Warring Kingdoms"},
["Kayle"]        = {"Classic", "Silver", "Viridian", "Unmasked", "Battleborn", "Judgment", "Aether Wing", "Riot"},
["Kennen"]       = {"Classic", "Deadly", "Swamp Master", "Karate", "Kennen M.D.", "Arctic Ops"},
["Khazix"]       = {"Classic", "Mecha", "Guardian of the Sands"},
["Kindred"]      = {"Classic", "Shadowfire"},
["KogMaw"]       = {"Classic", "Caterpillar", "Sonoran", "Monarch", "Reindeer", "Lion Dance", "Deep Sea", "Jurassic", "Battlecast"},
  -- L 
["Leblanc"]      = {"Classic", "Wicked", "Prestigious", "Mistletoe", "Ravenborn"},
["LeeSin"]       = {"Classic", "Traditional", "Acolyte", "Dragon Fist", "Muay Thai", "Pool Party", "SKT T1", "Chroma Pack: Black", "Chroma Pack: Blue", "Chroma Pack: Yellow", "Knockout"},
["Leona"]        = {"Classic", "Valkyrie", "Defender", "Iron Solari", "Pool Party", "Chroma Pack: Pink", "Chroma Pack: Azure", "Chroma Pack: Lemon", "PROJECT"},
["Lissandra"]    = {"Classic", "Bloodstone", "Blade Queen"},
["Lucian"]       = {"Classic", "Hired Gun", "Striker", "Chroma Pack: Yellow", "Chroma Pack: Red", "Chroma Pack: Blue", "PROJECT"},
["Lulu"]         = {"Classic", "Bittersweet", "Wicked", "Dragon Trainer", "Winter Wonder", "Pool Party"},
["Lux"]          = {"Classic", "Sorceress", "Spellthief", "Commando", "Imperial", "Steel Legion", "Star Guardian"},
  -- M 
["Malphite"]     = {"Classic", "Shamrock", "Coral Reef", "Marble", "Obsidian", "Glacial", "Mecha", "Ironside"},
["Malzahar"]     = {"Classic", "Vizier", "Shadow Prince", "Djinn", "Overlord", "Snow Day"},
["Maokai"]       = {"Classic", "Charred", "Totemic", "Festive", "Haunted", "Goalkeeper"},
["MasterYi"]     = {"Classic", "Assassin", "Chosen", "Ionia", "Samurai Yi", "Headhunter", "Chroma Pack: Gold", "Chroma Pack: Aqua", "Chroma Pack: Crimson", "PROJECT"},
["MissFortune"]  = {"Classic", "Cowgirl", "Waterloo", "Secret Agent", "Candy Cane", "Road Warrior", "Mafia", "Arcade", "Captain"},
["Mordekaiser"]  = {"Classic", "Dragon Knight", "Infernal", "Pentakill", "Lord", "King of Clubs"},
["Morgana"]      = {"Classic", "Exiled", "Sinful Succulence", "Blade Mistress", "Blackthorn", "Ghost Bride", "Victorious", "Chroma Pack: Toxic", "Chroma Pack: Pale", "Chroma Pack: Ebony","Lunar"},
  -- N 
["Nami"]         = {"Classic", "Koi", "River Spirit", "Urf", "Chroma Pack: Sunbeam", "Chroma Pack: Smoke", "Chroma Pack: Twilight"},
["Nasus"]        = {"Classic", "Galactic", "Pharaoh", "Dreadknight", "Riot K-9", "Infernal", "Archduke", "Chroma Pack: Burn", "Chroma Pack: Blight", "Chroma Pack: Frostbite",},
["Nautilus"]     = {"Classic", "Abyssal", "Subterranean", "AstroNautilus", "Warden"},
["Nidalee"]      = {"Classic", "Snow Bunny", "Leopard", "French Maid", "Pharaoh", "Bewitching", "Headhunter", "Warring Kingdoms"},
["Nocturne"]     = {"Classic", "Frozen Terror", "Void", "Ravager", "Haunting", "Eternum"},
["Nunu"]         = {"Classic", "Sasquatch", "Workshop", "Grungy", "Nunu Bot", "Demolisher", "TPA", "Zombie"},
  -- O 
["Olaf"]         = {"Classic", "Forsaken", "Glacial", "Brolaf", "Pentakill", "Marauder"},
["Orianna"]      = {"Classic", "Gothic", "Sewn Chaos", "Bladecraft", "TPA", "Winter Wonder"},
  -- P 
["Pantheon"]     = {"Classic", "Myrmidon", "Ruthless", "Perseus", "Full Metal", "Glaive Warrior", "Dragonslayer", "Slayer"},
["Poppy"]        = {"Classic", "Noxus", "Lollipoppy", "Blacksmith", "Ragdoll", "Battle Regalia", "Scarlet Hammer"},
  -- Q 
["Quinn"]        = {"Classic", "Phoenix", "Woad Scout", "Corsair"},
  -- R 
["Rammus"]       = {"Classic", "King", "Chrome", "Molten", "Freljord", "Ninja", "Full Metal", "Guardian of the Sands"},
["Reksai"]       = {"Classic", "Eternum", "Pool Party"},
["Renekton"]     = {"Classic", "Galactic", "Outback", "Bloodfury", "Rune Wars", "Scorched Earth", "Pool Party", "Scorched Earth", "Prehistoric"},
["Rengar"]       = {"Classic", "Headhunter", "Night Hunter", "SSW"},
["Riven"]        = {"Classic", "Redeemed", "Crimson Elite", "Battle Bunny", "Championship", "Dragonblade", "Arcade"},
["Rumble"]       = {"Classic", "Rumble in the Jungle", "Bilgerat", "Super Galaxy"},
["Ryze"]         = {"Classic", "Human", "Tribal", "Uncle", "Triumphant", "Professor", "Zombie", "Dark Crystal", "Pirate", "Whitebeard"},
  -- S 
["Sejuani"]      = {"Classic", "Sabretusk", "Darkrider", "Traditional", "Bear Cavalry", "Poro Rider"},
["Shaco"]        = {"Classic", "Mad Hatter", "Royal", "Nutcracko", "Workshop", "Asylum", "Masked", "Wild Card"},
["Shen"]         = {"Classic", "Frozen", "Yellow Jacket", "Surgeon", "Blood Moon", "Warlord", "TPA"},
["Shyvana"]      = {"Classic", "Ironscale", "Boneclaw", "Darkflame", "Ice Drake", "Championship"},
["Singed"]       = {"Classic", "Riot Squad", "Hextech", "Surfer", "Mad Scientist", "Augmented", "Snow Day", "SSW"},
["Sion"]         = {"Classic", "Hextech", "Barbarian", "Lumberjack", "Warmonger"},
["Sivir"]        = {"Classic", "Warrior Princess", "Spectacular", "Huntress", "Bandit", "PAX", "Snowstorm", "Warden", "Victorious"},
["Skarner"]      = {"Classic", "Sandscourge", "Earthrune", "Battlecast Alpha", "Guardian of the Sands"},
["Sona"]         = {"Classic", "Muse", "Pentakill", "Silent Night", "Guqin", "Arcade", "DJ"},
["Soraka"]       = {"Classic", "Dryad", "Divine", "Celestine", "Reaper", "Order of the Banana"},
["Swain"]        = {"Classic", "Northern Front", "Bilgewater", "Tyrant"},
["Syndra"]       = {"Classic", "Justicar", "Atlantean", "Queen of Diamonds"},
  -- T 
["TahmKench"]    = {"Classic", "Master Chef"},
["Talon"]        = {"Classic", "Renegade", "Crimson Elite", "Dragonblade", "SSW"},
["Taric"]        = {"Classic", "Emerald", "Armor of the Fifth Age", "Bloodstone"},
["Teemo"]        = {"Classic", "Happy Elf", "Recon", "Badger", "Astronaut", "Cottontail", "Super", "Panda", "Omega Squad"},
["Thresh"]       = {"Classic", "Deep Terror", "Championship", "Blood Moon", "SSW"},
["Tristana"]     = {"Classic", "Riot Girl", "Earnest Elf", "Firefighter", "Guerilla", "Buccaneer", "Rocket Girl", "Chroma Pack: Navy", "Chroma Pack: Purple", "Chroma Pack: Orange", "Dragon Trainer"},
["Trundle"]      = {"Classic", "Lil' Slugger", "Junkyard", "Traditional", "Constable"},
["Tryndamere"]   = {"Classic", "Highland", "King", "Viking", "Demonblade", "Sultan", "Warring Kingdoms", "Nightmare"},
["TwistedFate"]  = {"Classic", "PAX", "Jack of Hearts", "The Magnificent", "Tango", "High Noon", "Musketeer", "Underworld", "Red Card", "Cutpurse"},
["Twitch"]       = {"Classic", "Kingpin", "Whistler Village", "Medieval", "Gangster", "Vandal", "Pickpocket", "SSW"},
  -- U 
["Udyr"]         = {"Classic", "Black Belt", "Primal", "Spirit Guard", "Definitely Not"},
["Urgot"]        = {"Classic", "Giant Enemy Crabgot", "Butcher", "Battlecast"},
  -- V 
["Varus"]        = {"Classic", "Blight Crystal", "Arclight", "Arctic Ops", "Heartseeker", "Swiftbolt"},
["Vayne"]        = {"Classic", "Vindicator", "Aristocrat", "Dragonslayer", "Heartseeker", "SKT T1", "Arclight", "Chroma Pack: Green", "Chroma Pack: Red", "Chroma Pack: Silver"},
["Veigar"]       = {"Classic", "White Mage", "Curling", "Veigar Greybeard", "Leprechaun", "Baron Von", "Superb Villain", "Bad Santa", "Final Boss"},
["Velkoz"]       = {"Classic", "Battlecast", "Arclight"},
["Vi"]           = {"Classic", "Neon Strike", "Officer", "Debonair", "Demon"},
["Viktor"]       = {"Classic", "Full Machine", "Prototype", "Creator"},
["Vladimir"]     = {"Classic", "Count", "Marquis", "Nosferatu", "Vandal", "Blood Lord", "Soulstealer", "Academy"},
["Volibear"]     = {"Classic", "Thunder Lord", "Northern Storm", "Runeguard", "Captain"},
  -- W 
["Warwick"]      = {"Classic", "Grey", "Urf the Manatee", "Big Bad", "Tundra Hunter", "Feral", "Firefang", "Hyena", "Marauder"},
["MonkeyKing"]   = {"Classic", "Volcanic", "General", "Jade Dragon", "Underworld","Radiant"},
  -- X 
["Xerath"]       = {"Classic", "Runeborn", "Battlecast", "Scorched Earth", "Guardian of the Sands"},
["XinZhao"]      = {"Classic", "Commando", "Imperial", "Viscero", "Winged Hussar", "Warring Kingdoms", "Secret Agent"},
  -- Y 
["Yasuo"]        = {"Classic", "High Noon", "PROJECT"},
["Yorick"]       = {"Classic", "Undertaker", "Pentakill"},
  -- Z 
["Zac"]          = {"Classic", "Special Weapon", "Pool Party", "Chroma Pack: Orange", "Chroma Pack: Bubblegum", "Chroma Pack: Honey"},
["Zed"]          = {"Classic", "Shockblade", "SKT T1", "PROJECT"},
["Ziggs"]        = {"Classic", "Mad Scientist", "Major", "Pool Party", "Snow Day", "Master Arcanist"},
["Zilean"]       = {"Classic", "Old Saint", "Groovy", "Shurima Desert", "Time Machine", "Blood Moon"},
["Zyra"]         = {"Classic", "Wildfire", "Haunted", "SKT T1"},
}
local function logDL(msg)
print("<font color=\"#e88ebc\">[DivineLib]</font> "..msg)
end

class 'DInfo'
DInfo.NAME = "DivineLib"
DInfo.VERSION = 0.1
DInfo.SSL = true
DInfo.SAVE_PATH = LIB_PATH.."DivineLib.lua"
DInfo.HOST_URL = 'raw.githubusercontent.com'
DInfo.SCRIPT_PATH = '/PewPewPew2/BoL/master/Pewtility.lua'
DInfo.VERSION_PATH = '/PewPewPew2/BoL/master/Versions/Pewtility.version'

class 'DDraw'
DDraw.cfg = nil
DDraw.RANGES_COLOR_MAPPING = {Q = {255,255, 183,51} , W = {255,52,152,219} , E ={255,4,120,120} , R ={255,194,33,33},I = {255,245,115,54}}
  DDraw.include = function(cfg,...)
	DDraw.cfg = cfg
	DDraw.cfg:addSubMenu("Drawing","drawing")
	DDraw.cfg.drawing:addParam("drawRanges","Draw Spell Ranges",SCRIPT_PARAM_ONOFF,true)
	DDraw.cfg.drawing:addSubMenu("Draw Spell Ranges Settings","rangesColors")
	DDraw.cfg.drawing.rangesColors:addParam("drawRange".._Q,"Draw Q Range",SCRIPT_PARAM_ONOFF,true)
	DDraw.cfg.drawing.rangesColors:addParam("".._Q,"Q",SCRIPT_PARAM_COLOR, DDraw.RANGES_COLOR_MAPPING.Q)
	DDraw.cfg.drawing.rangesColors:addParam("drawRange".._W,"Draw W Range",SCRIPT_PARAM_ONOFF,false)
	DDraw.cfg.drawing.rangesColors:addParam("".._W,"W",SCRIPT_PARAM_COLOR, DDraw.RANGES_COLOR_MAPPING.W)
	DDraw.cfg.drawing.rangesColors:addParam("drawRange".._E,"Draw E Range",SCRIPT_PARAM_ONOFF,false)
	DDraw.cfg.drawing.rangesColors:addParam("".._E,"E",SCRIPT_PARAM_COLOR, DDraw.RANGES_COLOR_MAPPING.E)
	DDraw.cfg.drawing.rangesColors:addParam("drawRange".._R,"Draw R Range",SCRIPT_PARAM_ONOFF,false)
	DDraw.cfg.drawing.rangesColors:addParam("".._R,"R",SCRIPT_PARAM_COLOR, DDraw.RANGES_COLOR_MAPPING.R)
	local igniteSlot = DUtil.getSummonerSlot("summonerdot")
	if igniteSlot then
		DDraw.cfg.drawing.rangesColors:addParam("drawRange"..igniteSlot,"Draw Ignite Range",SCRIPT_PARAM_ONOFF,false)
		DDraw.cfg.drawing.rangesColors:addParam(""..igniteSlot,"I",SCRIPT_PARAM_COLOR, DDraw.RANGES_COLOR_MAPPING.I)
	end
	DDraw.cfg.drawing.rangesColors:addParam("alpha","Transparency", SCRIPT_PARAM_SLICE,255,0,255,0)
	DDraw.cfg.drawing.rangesColors:addParam("width","Thickness", SCRIPT_PARAM_SLICE,1,1,5,0)
	DDraw.cfg.drawing.rangesColors:addParam("sampling","Sampling", SCRIPT_PARAM_SLICE,180,1,500,0)
	DDraw.cfg.drawing:addParam("drawHIndicator","Draw Healthbar Indicator",SCRIPT_PARAM_ONOFF,true)
	DDraw.cfg.drawing:addSubMenu("Draw Healthbar Indicator Settings","hIndicatorSettings")
	DDraw.cfg.drawing.hIndicatorSettings:addParam("drawInRange","Draw Only when enemy is in spell range",SCRIPT_PARAM_ONOFF,false)
	DDraw.cfg.drawing.hIndicatorSettings:addParam("drawNotOnCD","Draw Only when Spell is not on CD",SCRIPT_PARAM_ONOFF,true)
	DDraw.cfg.drawing.hIndicatorSettings:addParam("size","Healthbar Indicators Size", SCRIPT_PARAM_SLICE,15,10,22,0)
	DDraw.cfg.drawing.hIndicatorSettings:addParam("height","Healthbar Indicators Height", SCRIPT_PARAM_SLICE,15,1,200,0)
	DDraw.cfg.drawing.hIndicatorSettings:addParam("alpha","Healthbar Overdraw Transparency", SCRIPT_PARAM_SLICE,115,0,255,0)
	
	local spells = table.pack(...)
	AddDrawCallback(function()
		if myHero.dead or not DDraw.cfg.drawing.drawRanges then return end
		local alpha = DDraw.cfg.drawing.rangesColors.alpha
		local width = DDraw.cfg.drawing.rangesColors.width
		local sampling = DDraw.cfg.drawing.rangesColors.sampling
		for i = 1, spells.n do
		local spell = spells[i]
		    if spell and DDraw.cfg.drawing.rangesColors["drawRange"..spell.idx] and myHero:CanUseSpell(spell.idx) == READY then
				local color = DDraw.cfg.drawing.rangesColors[""..spell.idx]
				DDraw.drawLFS(myHero.x, myHero.y, myHero.z, spell.range,width,ARGB(alpha,color[2],color[3],color[4]),sampling,false,true)
			end
		end
	end)
  end
  
  
  DDraw.getHeatColor = function (value,min,max,alpha)     
	local val = (value - min) / (max - min);
	return ARGB(alpha, FLOOR(255 * val),FLOOR(255 * (1 - val)), 0);
  end
  
 DDraw.drawLines = function(pts,width,color, segLength)
  local segCounter = 0
  local draw = false
  for i = 2,#pts do
   if segLength then
      if segCounter == segLength then
        draw = not draw
        segCounter = 0
      else
        segCounter = segCounter + 1 
      end
    end
    
    if (not segLength) or (draw) then
      DrawLine3D(pts[i].x,pts[i].y,pts[i].z,pts[i-1].x,pts[i-1].y,pts[i-1].z,width,color)
     --DrawLine(pts[i].x, pts[i].y, pts[i - 1].x, pts[i - 1].y, width,color)
    end 
  end
end

function DDraw.getTransColor(trans,color)
	return  tonumber(string.format("%02X","0x"..trans..color),16)
end

DDraw.DrawCircleCustom = function(x, y, z, radius, width, color, chordlength,visionCare, segLength)
  radius = radius or 300
  quality = math.max(8,round(180/math.deg((math.asin((chordlength/(2*radius)))))))
  quality = 2 * math.pi / quality
  radius = radius*.92
  local points = {}
  for theta = 0, 2 * math.pi + quality, quality do
    local pos= D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta))
    if visionCare then
      local blocked = true
      for i = 200,radius,15 do
        local validPos = D3DXVECTOR3(x + i * math.cos(theta), y, z - i * math.sin(theta))
        if blocked and (IsGrass(validPos)  or IsWall(validPos)) then
          pos = validPos
          blocked = false
        end
      end
    end
   -- local c = WorldToScreen(pos)
    points[#points + 1] = D3DXVECTOR3(pos.x, pos.y,pos.z)
  end
  DDraw.drawLines(points, width or 1, color or  0xBBff6600,segLength)
end

function round(num)
  if num >= 0 then return math.floor(num+.5) else return math.ceil(num-.5) end
end

 DDraw.drawLFS = function(x, y, z, radius,width,color,chordLength,visionCare,alwaysDraw,segLength)
  local vPos1 = Vector(x, y, z)
  local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
  local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
  local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
  if alwaysDraw or OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y })  then
    DDraw.DrawCircleCustom(x, y, z, radius, width, color,chordLength,visionCare,segLength)
  end
end
class 'DPredictions'
 
	DPredictions.dPred,DPredictions.kPred,DPredictions.fhPred,DPredictions.vPred = nil,nil,nil,nil
	DPredictions.includePred = false
	DPredictions.selectedPrediction = nil
	DPredictions.loadedPredLibs = {dpred = false,kpred = false,fh = false, vpred = false}
	DPredictions.includePrediction = function(cfg)  
		DPredictions.cfg = cfg
		DPredictions.includePred = true
		DPredictions.cfg:addSubMenu("Prediction","pred")
		DPredictions.cfg.pred:addParam("prediction", "Select ", SCRIPT_PARAM_LIST, 1, { "Divine Pred","FH Pred","VPred"})
		DPredictions.cfg.pred:addParam("hitchance","Q HitChance % >=", SCRIPT_PARAM_SLICE,50,1,100,0)
		AddTickCallback(function()
			if DPredictions.includePred then 
				if DPredictions.cfg.pred.prediction == 1 then 
					if not DPredictions.loadedPredLibs.dpred then
						if FileExist(LIB_PATH .. "DivinePred.lua") and FileExist(LIB_PATH .. "DivinePred.luac") then 
							require ("DivinePred")
							DPredictions.dPred = DivinePred()
							--logDL("Loaded Divine Prediciton.")
							DPredictions.loadedPredLibs.dpred = true
							DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 

						else
							logDL("Couldn't find Divine Prediction Lib, please make sure its downloaded and that it has the same original file name or choose another prediction.")
							--DelayAction(function() end,1)
							DPredictions.selectedPrediction = nil
						end
					else
						DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
					end
					
			--[[	elseif DPredictions.cfg.pred.prediction == 2 then
					if not DPredictions.loadedPredLibs.kpred then
						if FileExist(LIB_PATH .. "KPrediction.lua") then 
								require ("KPrediction")
								DPredictions.kPred = KPrediction()
								logDL("Loaded KPrediction")
								DPredictions.loadedPredLibs.kpred = true
								DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
						else
								logDL("Couldn't find KPrediction Lib, please make sure its downloaded and that it has the same original file name or choose another prediction.")
								--DelayAction(function() end,1)
								DPredictions.selectedPrediction = nil
						end
					else
						DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
					end]]--
				elseif DPredictions.cfg.pred.prediction == 2 then
					if not DPredictions.loadedPredLibs.fh then
						if FHPrediction then 
								--require ("FHPrediction")
								logDL("Detected and set FHPrediction")
								DPredictions.fhPred = FHPrediction
								DPredictions.loadedPredLibs.fh = true
								DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
						else
								logDL("Please Make sure to place FHPrediction.lua in Scripts folder and run it as a standalone script to be able to use it or select another prediction.")
								--DelayAction(function() end,1)
								DPredictions.selectedPrediction = nil
						end
					else
						DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
					end
					
				elseif DPredictions.cfg.pred.prediction == 3 then
					if not DPredictions.loadedPredLibs.vpred then
						if FileExist(LIB_PATH .. "VPrediction.lua") then 
								require ("VPrediction")
								DPredictions.vPred = VPrediction()
								--logDL("Loaded VPrediction")
								DPredictions.loadedPredLibs.vpred = true
								DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
						else
								logDL("Couldn't find VPrediction Lib, please make sure its downloaded and that it has the same original file name or choose another prediction.")
								--DelayAction(function() end,1)
								DPredictions.selectedPrediction = nil
						end
					else
						DPredictions.selectedPrediction = DPredictions.cfg.pred.prediction 
					end
				end
			end
		end )
	end
	
	--DivinePred:predict(spellBinding,target,from,ssType,speed,range,radius,delay,allowedCollisions,colType)
	DPredictions.predict = function(data,target,src,defaultPerc)
		if DPredictions.loadedPredLibs.dpred and DPredictions.selectedPrediction == 1 then -- Divine Pred
			  DPredictions.dPred:bindSS(data.binding,defaultPerc or 60)  
			local state,castPos,hitchance = DPredictions.dPred:predict(data.binding, target, src,data.dtype, data.speed,data.range,data.width,data.delay,data.allowedCollisions,data.colType)
			return castPos,hitchance 
		--[[elseif DPredictions.loadedPredLibs.kpred and DPredictions.selectedPrediction == 2 then -- KPred
			local castPos,hitchance = DPredictions.kPred:GetPrediction({type = data.ktype, delay = data.delay/1000, range = data.range, speed = data.speed, collisionM = data.allowedCollisions == HUGE and false or ((not data.colType) or data.colType.Minions), collisionH = data.allowedCollisions == HUGE and false or ((not data.colType) or data.colType.Champions), width = data.width*2}, target, src , data.allowedCollisions == HUGE and true or false )
			return castPos,hitchance*100/4 ]]--
		elseif DPredictions.loadedPredLibs.fh and DPredictions.selectedPrediction == 2 then -- FH Pred
				local castPos,hitchance = DPredictions.fhPred.GetPrediction({type = data.fhtype ,range = data.range, speed = data.speed, radius = data.width, delay = data.delay/1000, collision =  { [CollisionObjectTypes.Minion] = data.allowedCollisions == HUGE and false or ((not data.colType) or data.colType.Minions),[CollisionObjectTypes.Champion] = data.allowedCollisions == HUGE and false or ((not data.colType) or data.colType.Champions)},type = data.fhType},target,src)
				return castPos,hitchance*100/2
		elseif DPredictions.loadedPredLibs.vpred and DPredictions.selectedPrediction == 3then -- VPred
				local castPos,hitchance = DPredictions.vPred:GetBestCastPosition(target, data.delay/1000, data.width, data.range, data.speed, src, data.allowedCollisions == HUGE and false or true, data.vtype )
				if hitchance then
					if hitchance == 1 then hitchance = 33.3
					elseif hitchance == 2 then hitchance = 66.6
					elseif hitchance == 3 then hitchance = 100
					end
				end
				return castPos,hitchance
		end
		return nil
	end
 

class  'DTimer'
-- Constructor
function DTimer:__init(limit)
  self.readonly = {}
  self:setLimit(limit)
  self.readonly.start = os.clock()*1000
  self.readonly.paused = false
  self.readonly.pauseTime = -1
end

--Functions

function DTimer:setLimit(limit)
  self.readonly.limit = limit;
end

function DTimer:getLimit()
  return self.readonly.limit
end

function DTimer:getElapsed()
  local timeSincePause = 0;
  if self.readonly.paused then
    timeSincePause = os.clock()*1000 - self.readonly.pauseTime
  end
  return os.clock()*1000 - (self.readonly.start + timeSincePause)
end

function DTimer:getRemaining()
  return self.readonly.limit - self:getElapsed()
end

function DTimer:getRemainingPercentage()
  return (self:getRemaining()*100)/self.readonly.limit
end

function DTimer:isRunning()
  return self:getRemaining() > 0
end

function DTimer:isUp()
  return self:getRemaining() <= 0
end

function DTimer:reset(limit)
  limit = limit and limit or self.readonly.limit
  self:setLimit(limit);
  self.readonly.start = os.clock()*1000;
  return self
end

function DTimer:pause()
  if not self.readonly.paused then
    self.readonly.paused = true;
    self.readonly.pauseTime = os.clock()*1000;
    return true
  end
  return false	
end

function DTimer:resume()
  if self.readonly.paused then
    self.readonly.start = self.readonly.start + ((os.clock()*1000) - self.readonly.pauseTime)
    self.readonly.paused = false;
    return true
  end
  return false
end


function DTimer:getLimitString()
  local seconds =  self:getLimit() / 1000
  local output = ""


  local ms = self:getLimit() % 1000
  local sec = seconds
  local min = sec / 60
  local hour = min / 60
  local ttlsecond = seconds < 0 and 0 or math.floor(sec % 60)
  local ttlminute = seconds < 0 and 0 or math.floor(min % 60)
  local ttlhour = seconds < 0 and 0 or math.floor(hour)

  if ttlhour >=1 then output = output..(ttlhour<10 and 0 or "")..ttlhour..":" end
  output = output..(ttlminute<10 and 0 or "")..ttlminute..":"
  output = output..(ttlsecond<10 and 0 or "")..ttlsecond

  return output;
end

function DTimer:getRemainingString(auth)
  local seconds = math.floor(self:getRemaining() / 1000)
  local output = ""


  local ms = math.floor(self:getRemaining() % 1000)
  local sec = seconds
  local min = math.floor(sec / 60)
  local hour = math.floor(min / 60)
  local ttlsecond = seconds < 0 and 0 or math.floor(sec % 60)
  local ttlminute = seconds < 0 and 0 or math.floor(min % 60)
  local ttlhour = seconds < 0 and 0 or math.floor(hour)

  if ttlhour >=1 then output = output..(ttlhour<10 and 0 or "")..ttlhour..":" end
  if(auth) then output = output..(ttlhour<10 and 0 or "")..ttlhour..":" end
  output = output..(ttlminute<10 and 0 or "")..ttlminute..":"
  output = output..(ttlsecond<10 and 0 or "")..ttlsecond

  return output;
end

function DTimer:getElapsedString()
  local seconds = math.floor(self:getElapsed() / 1000)
  local output = ""


  local ms = math.floor(self:getElapsed() % 1000)
  local sec = seconds
  local min = math.floor(sec / 60)
  local hour = math.floor(min / 60)
  local ttlsecond = seconds < 0 and 0 or math.floor(sec % 60)
  local ttlminute = seconds < 0 and 0 or math.floor(min % 60)
  local ttlhour = seconds < 0 and 0 or math.floor(hour)

  if ttlhour >=1 then output = output..(ttlhour<10 and 0 or "")..ttlhour..":" end
  output = output..(ttlminute<10 and 0 or "")..ttlminute..":"
  output = output..(ttlsecond<10 and 0 or "")..ttlsecond

  return output;
end


function DTimer:isUpThenReset()
  if self:isUp() then
    self:reset()
    return true
  end
  return false
end


class 'DOrbwalking'
DOrbwalking.Mode = {COMBO = 0, HARRAS = 1, LANE_CLEAR = 2, LAST_HIT = 3}
DOrbwalking.orbwalkers = {SAC = 0 , PeWalk = 1, sxOrbWalk = 2}
DOrbwalking.activeOrbwalker = nil
DOrbwalking.sacCheckAttempts = 0
DOrbwalking.loadNonSac = function(cfg)
DelayAction(function()

	if _Pewalk then
		logDL("Pewalk Detected Running!")
		DelayAction(function()
		_Pewalk.DisableSkillFarm(_Q)
		_Pewalk.DisableSkillFarm(_W)
		_Pewalk.DisableSkillFarm(_E)
		_Pewalk.DisableSkillFarm(_R)
		end,2)
		DOrbwalking.cfg.orb:addParam("orbWalkInfo","PeWalk In Action, Tweak settings in Pewalk menu.",SCRIPT_PARAM_INFO,"")
	elseif _G.MMA_IsLoaded then 
		DOrbwalking.cfg.orb:addParam("orbWalkInfo","MMA In Action, Tweak settings in MMA menu.",SCRIPT_PARAM_INFO,"")
	else

		logDL("No active orbwalker found, switching to SxOrbWalk Lib")
		if not FileExist(LIB_PATH .. "SxOrbWalk.lua") then
			ScriptUpdate(
		"SxOrbWalk",
		0,
		true,
		DInfo.HOST_URL, 
		"/Nader-Sl/BoLStudio/master/Versions/versiondummy.version", 
		"/Superx321/BoL/master/common/SxOrbWalk.lua", 
		LIB_PATH.."SxOrbWalk.lua", 
		function() 
		require('SxOrbWalk')
			DOrbwalking.sx = SxOrbWalk()
			DOrbwalking.sx:LoadToMenu(DOrbwalking.cfg.orb)
		end, 
		function()   end, --load complete
		function()   end, --new version
		function() logDL('An Error Occured in during SxOrbwalk download, please restart the script (F9 x F9)') end
	)
		else
			require('SxOrbWalk')
			DOrbwalking.sx = SxOrbWalk()
			DOrbwalking.sx:LoadToMenu(DOrbwalking.cfg.orb)
		end
	  end
	  end,5)
	end
 

DOrbwalking.include = function(cfg)

	DOrbwalking.cfg = cfg 
	DOrbwalking.sx = {}
	DOrbwalking.cfg:addSubMenu("Orbwalking","orb")
	DOrbwalking.sacFailed,DOrbwalking.sacLoaded = false,false	
	DOrbwalking.sacT = DTimer(1000)
	if _G.Reborn_Loaded then
			logDL("SAC Detected Running! [Waiting for Initialization] ...")
		AddTickCallback(function()
		if not DOrbwalking.sacT:isUp() or DOrbwalking.sacFailed or DOrbwalking.sacLoaded then return end
		if _G.Reborn_Initialised then
		  logDL("Using SAC! [initialized]")
		  DOrbwalking.activeOrbwalker = DOrbwalking.orbwalkers.SAC
		  DOrbwalking.cfg.orb:addParam("orbWalkInfo","SAC In Action, Tweak Ssettings in SAC Menu.",SCRIPT_PARAM_INFO,"")
		  DOrbwalking.sacLoaded = true
		else
		  if DOrbwalking.sacCheckAttempts >= 10 then 
			logDL("SAC failed to initialize after "..DOrbwalking.sacCheckAttempts.." attempts, switching to another orbwalker.") ;
			DOrbwalking.sacFailed = true
			DOrbwalking.loadNonSac(cfg)
		  else 
			DOrbwalking.sacCheckAttempts = DOrbwalking.sacCheckAttempts + 1
			DOrbwalking.sacT:reset(1000)
		  end
		 end
		end)
	else
		DOrbwalking.loadNonSac(cfg)
	end
	 
end

DOrbwalking.isAAReady = function()
	if _G.Reborn_Initialised then
			--print(_G.AutoCarry.Orbwalker:CanShoot())
		return _G.AutoCarry.Orbwalker:CanShoot()
	elseif _Pewalk then
		 --print(_Pewalk.CanAttack())
		return _Pewalk.CanAttack and _Pewalk.CanAttack() or false
	elseif _G.SxOrb then
		-- print("ssss"..((DOrbwalking.sx:CanAttack()) and "true" or "false"))
		return DOrbwalking.sx.CanAttack and DOrbwalking.sx:CanAttack() or false
	end
end

DOrbwalking.getActiveMode = function(spell)
	if spell and myHero:CanUseSpell(spell) ~= READY then return nil end
	if _G.Reborn_Initialised and _G.AutoCarry.Keys then
		if _G.AutoCarry.Keys.AutoCarry then return DOrbwalking.Mode.COMBO
		elseif _G.AutoCarry.Keys.MixedMode then return DOrbwalking.Mode.HARRAS
		elseif _G.AutoCarry.Keys.LaneClear then return DOrbwalking.Mode.LANE_CLEAR
		elseif _G.AutoCarry.Keys.LastHit then return DOrbwalking.Mode.LAST_HIT
		end
	elseif _G.MMA_IsLoaded then
	
		if _G.MMA_IsOrbwalking() then return DOrbwalking.Mode.COMBO
		elseif _G.MMA_IsDualCarrying()  then return DOrbwalking.Mode.HARRAS
		elseif _G.MMA_IsLaneClearing() then return DOrbwalking.Mode.LANE_CLEAR
		elseif _G.MMA_IsLastHitting() then return DOrbwalking.Mode.LAST_HIT end
	elseif _Pewalk and _Pewalk.GetActiveMode then
		local activeModes = _Pewalk.GetActiveMode()
		if activeModes.Carry then return DOrbwalking.Mode.COMBO
		elseif activeModes.Mixed then return DOrbwalking.Mode.HARRAS
		elseif activeModes.LaneClear then return DOrbwalking.Mode.LANE_CLEAR
		elseif activeModes.Farm then return DOrbwalking.Mode.LAST_HIT end
	elseif _G.SxOrb then
 
		if DOrbwalking.sx.isFight then return DOrbwalking.Mode.COMBO
		elseif DOrbwalking.sx.isHarass then return DOrbwalking.Mode.HARRAS
		elseif DOrbwalking.sx.isLaneClear then return DOrbwalking.Mode.LANE_CLEAR
		elseif DOrbwalking.sx.isLastHit  then return DOrbwalking.Mode.LAST_HIT end
	end
return nil
end

class 'DStructs'
DStructs.SpellType = {AP = 0, AD = 1}


class 'DGeom' 
DGeom.project = function(v1,v2)
  return Vector(v2 * (v1:dotP(v2) / (v2:len2())));
end

DGeom.reject = function(v1,v2)
   return v1 - DGeom.project(v1,v2)
end

DGeom.getDistSQ = function(v1,v2)
	 local x, z = v1.x-v2.x,  v1.z-v2.z;
	 return x*x  + z*z 
end

DGeom.areCollinear = function(a,b,c)
--[ Ax * (By - Cy) + Bx * (Cy - Ay) + Cx * (Ay - By) ] / 2
  return (FLOOR((a.x*(b.z-c.z) + b.x*(c.z-a.z) + c.x*(a.z-b.z))/2)) ==  0
end

DGeom.getIntersection2 = function( x1,y1, x2,y2,  x3,  y3,  x4, y4) 
    local d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4)
    if (d == 0) then return nil end
    
    local xi = ((x3-x4)*(x1*y2-y1*x2)-(x1-x2)*(x3*y4-y3*x4))/d;
    local yi = ((y3-y4)*(x1*y2-y1*x2)-(y1-y2)*(x3*y4-y3*x4))/d;
    
    return Vector(xi,0,yi);
 end
 
DGeom.getIntersection = function( v1Start,  v1End, v2Start,  v2End)
    local s1_x, s1_y, s2_x, s2_y =  v1End.x - v1Start.x,v1End.z - v1Start.z,v2End.x - v2Start.x,v2End.z - v2Start.z
    local div = (-s2_x * s1_y + s1_x * s2_y)
	if div == 0 then return nil end
    local s = (-s1_y * (v1Start.x - v2Start.x) + s1_x * (v1Start.z - v2Start.z)) /div;
    local t = ( s2_x * (v1Start.z - v2Start.z) - s2_y * (v1Start.x - v2Start.x)) / div;
return (s >= 0 and s <= 1 and t >= 0 and t <= 1) and (Vector(v1Start.x + (t * s1_x),0,v1Start.z + (t * s1_y)) or nil)
end

DGeom.intersects = function( v1Start,  v1End, v2Start,  v2End)
 --if v1Start.y ~= 0 or v1End.y ~= 0 or v2Start.y ~= 0 or v2End.y ~=0 then print("WAAAAAAAAAAAT") end
    local s1_x, s1_y, s2_x, s2_y =  v1End.x - v1Start.x,v1End.z - v1Start.z,v2End.x - v2Start.x,v2End.z - v2Start.z
    local div = (-s2_x * s1_y + s1_x * s2_y)
	if div == 0 then return nil end
    local s = (-s1_y * (v1Start.x - v2Start.x) + s1_x * (v1Start.z - v2Start.z)) /div;
    local t = ( s2_x * (v1Start.z - v2Start.z) - s2_y * (v1Start.x - v2Start.x)) / div;
return (s >= 0 and s <= 1 and t >= 0 and t <= 1)
end


DGeom.polyIntersection = function(poly1,poly2)
	for i = 1,#poly1  - 1 do
		for j = 1,#poly2 - 1 do
			local inter = intersects(poly1[i],poly1[i+1],poly2[j],poly2[j+1])
			if inter then inter = nil ; return true end
		end
	end
	return false
end

DGeom.polyInterLines = function(poly,lines)
	for i = 1,#poly1  - 1 do
		for j = 1,#poly2 - 1 do
			local inter = intersects(poly1[i],poly1[i+1],poly2[j],poly2[j+1])
			if inter then return true end
		end
	end
	return false
end

DGeom.polyOverlap = function(poly1,poly2)
local inter = polyIntersection(poly1,poly2)
local poly2v1 = poly2[1]
local poly1v1 = poly1[1]
return inter and inter or (insidePoly(poly1,poly2v1.x,poly2v1.z) or insidePoly(poly2,poly1v1.x,poly1v1.z))  
end

DGeom.insideRect = function(topLeft,botRight,testX,testY)
	 return testX >= topLeft.x and testX <= botRight.x and testY <= topLeft.y and testY>= botRight.y
end

DGeom.insidePoly = function(pts,  testx, testy)
  local i, j, c = 0,#pts,0
  for i = 0,  #pts do
     if pts and pts[i] and pts[j] then
    if ( ((pts[i].z>testy) ~= (pts[j].z>testy)) and
     (testx < (pts[j].x-pts[i].x) * (testy-pts[i].z) / (pts[j].z-pts[i].z) + pts[i].x) ) then
       c = not c;
	  end
	  j = i
   end
  end
return not c
end

DGeom.getPolyCenter = function(points)
	local pointsSum = Vector(0,0,0)
	local polySize = #points
    for i = 1, polySize do pointsSum.x = pointsSum.x + points[i].x; pointsSum.y = pointsSum.y+ points[i].y;pointsSum.z = pointsSum.z + points[i].z end
    return Vector( pointsSum.x / polySize, pointsSum.y / polySize, pointsSum.z /polySize)
end

DGeom.getLineBounds = function(startPos,endPos,width)
   startPos.y = 0
   endPos.y = 0
	local perpa= endPos + (width*(((normalVec:crossP(endPos - startPos)):normalized())))
	local perpb = endPos + (width*(((endPos -startPos):crossP(normalVec)):normalized()))
	local perp2a= startPos+ (width*(((normalVec:crossP(endPos - startPos)):normalized())))
	local perp2b = startPos+ (width*(((endPos -startPos):crossP(normalVec)):normalized()))
	--	if perpa.y ~=0 or perp2a.y ~= 0 or perpb ~= 0 or perp2b.y ~= 0 then print("SDASDASDA") end
		perpa.y = 0
		perp2a.y =0
		perpb.y =0
		perp2b.y = 0
	return {perp2a,perpa,perpb,perp2b,perp2a}
end

class 'DUtil'
DUtil.invSlots = {_G.ITEM_1 ,
	_G.ITEM_2,
	_G.ITEM_3,
	_G.ITEM_4,
	_G.ITEM_5,
	_G.ITEM_6,
	_G.ITEM_7}
	
DUtil.cfg = nil
DUtil.skinIdx = 1
DUtil.changeSkin = false
function DUtil:__init()
end
 
DUtil.getSummonerSlot = function(spellName)
	spellName = spellName:lower()
	local s1Data  = myHero:GetSpellData(SUMMONER_1)
	local s2Data  = myHero:GetSpellData(SUMMONER_2)	
	if s1Data.name:lower() == spellName then return SUMMONER_1 end
	if s2Data.name:lower() == spellName then return SUMMONER_2 end
	return nil
end
DUtil.isParking = function(unit)
 return (self.unit.path.count < 2 )  or (not self.unit.isMoving)
end

DUtil.getManaPerc = function(unit)
	if not unit then unit = myHero end
	return (unit.mana*100)/unit.maxMana 
end

DUtil.getHealthPerc = function(unit)
	if not unit then unit = myHero end
	return (unit.health*100)/unit.maxHealth
end

DUtil.getInvSlotByID = function(id)
	for i = 1, #DUtil.invSlots do
		local slot = DUtil.invSlots[i]
		if myHero:getInventorySlot(slot) == id then return slot end
	end
	return nil
end

DUtil.processObjects = function(objects,procFunc, ...)
    for i=1,(objects and #objects or objManager.iCount) do
            local obj = objects and objects[i] or objManager:getObject(i)
              if obj then
                local args = table.pack(...)
                local successCount = 0
                for j=1,args.n do
                   if args[j](obj) then successCount = successCount + 1 end
                end
                if(successCount == args.n) then
                  procFunc(obj)
                end
              end
    end            
end

DUtil.processMinions = function(minions,procFunc, ...)
 -- local args = table.pack(...)
  DUtil.processObjects(minions,procFunc,...,function(obj) return obj.type and obj.type == "obj_AI_Minion" and (not obj.dead) and string.starts(obj.name,"Minion") end)        
end

DUtil.invulSpells = 
{"undyingrage",
 "sionpassivezombie",
 "ZacRebirthReady",
 "FerociousHowl",
 "VladimirSanguinePool",
 "aatroxpassivedeath",
 "chronoshift", 
 "ChronoRevive", 
 "judicatorintervention",
 "KarthusDeathDefiedBuff",
 "zhonyasringshield",
 "lissandrarself",
 "bansheesveil",
 "SivirE",
 "NocturneW",
 "kindredrnodeathbuff"
 }
-- objects, ... filters
DUtil.getObjects = function(...)
  local subset = {}
  local idx = 1
  local args = table.pack(...)
      for i=1, objManager.iCount do
            local obj = objManager:getObject(i)
              if obj then
                local valid = true
                for j=1,args.n do
                  if not args[j](obj) then valid = false ; break; end
                end
                if valid then subset[idx] = obj ; idx = idx + 1 end
              end
      end
      return subset
end

DUtil.getMinions = function(...)
  --local args = table.pack(...)
 
  return DUtil.getObjects(...,function(obj)
    --if obj.visible and obj.type and obj.type == "obj_AI_Minion" and (not obj.dead) then print(obj.name) end
  return obj.visible and obj.type and obj.type == "obj_AI_Minion" and obj.name ~= "Poo" and (not obj.dead) end)
end

DUtil.processChamps = function(procFunc, filter)
  for i = 1, heroManager.iCount do -- Add Enemy Champs Collision 
								local hero = heroManager:GetHero(i)
                if hero and hero.valid and (filter == nil and true or filter(hero)) then
                  procFunc(hero)
                end
  end
end

DUtil.hasBuff = function(unit,buffName)
	if not unit then unit = myHero end
	for i=1,unit.buffCount do
			local buff = unit:getBuff(i)
			--if buff and buff.valid then print(buff.name) end
			--print(buff.name)
			if buff and buff.valid and (type(buffName) == "table" and buffName[buff.name] or buffName == buff.name) then return true end
	end
	return false
end

DUtil.isInvulnerable = function(unit)
  for k,v in pairs(DUtil.invulSpells) do
    if DUtil.hasBuff(unit,v) then
      return true
    end
  end
    return false
end
 

DUtil.gapClosers = 
{
             "LeonaZenithBlade",
			"AatroxQ",
			"AkaliShadowDance",
			"Headbutt",
			"FioraQ",
			"DianaTeleport",
			"EliseSpiderQCast",
			"FizzPiercingStrike",
			"GragasE",
			"HecarimUlt",
			"JarvanIVDragonStrike",
			"IreliaGatotsu",
			"JaxLeapStrike",
			"KhazixE",
			"khazixelong",
			"LeblancSlide",
			"LeblancSlideM",
			"BlindMonkQTwo",
			"LeonaZenithBlade",
			"UFSlash",
			"Pantheon_LeapBash",
			"PoppyHeroicCharge",
			"RenektonSliceAndDice",
			"RivenTriCleave",
			"SejuaniArcticAssault",
			"slashCast",
			"ViQ",
			"MonkeyKingNimbus",
			"XenZhaoSweep",
			"YasuoDashWrapper",
			"summonerflash"
}

DUtil.isGapCloser = function(spellName)
	return table.contains(DUtil.gapClosers,spellName)
end

DUtil.interruptables  = {
		 "KatarinaR"
			,"GalioIdolOfDurand"
			,"Crowstorm"
			, "DrainChannel"
			,"AbsoluteZero"
			,"ShenStandUnited"
			,"UrgotSwap2"
			,"AlZaharNetherGrasp"
			,"FallenOne"
			,"Pantheon_GrandSkyfall_Jump"
			,"CaitlynAceintheHole"
			,"MissFortuneBulletTime"
			,"InfiniteDuress"
			,"Teleport"
			,"Meditate"
			,"summonerteleport"
			
}

DUtil.includeAutoLevel = function(cfg)
DUtil.cfg = cfg
DUtil.lastLevel = myHero.level

cfg:addSubMenu("Auto Level-Up","autolevel"..myHero.charName)

cfg["autolevel"..myHero.charName]:addParam("autolevel"..myHero.charName,"Auto Level-Up",SCRIPT_PARAM_ONOFF,false)
cfg["autolevel"..myHero.charName]:addParam("level1","L1 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level2","L2 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level3","L3 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level4","L4 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level5","L5 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level6","L6 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,4,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level7","L7 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level8","L8 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level9","L9 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level10","L10 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level11","L11 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,4,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level12","L12 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level13","L13 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level14","L14 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level15","L15 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level16","L16 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,4,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level17","L17 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
cfg["autolevel"..myHero.charName]:addParam("level18","L18 (0 = off,1=Q, 2=W, 3=E, 4=R)", SCRIPT_PARAM_SLICE,0,0,4,0)
if myHero.level == 1 then 
	local idx = cfg["autolevel"..myHero.charName]["level1"]
	if (cfg["autolevel"..myHero.charName]["autolevel"..myHero.charName] ) and idx ~= 0 then 
		_G.LevelSpell(idx - 1)
	end
 end 
AddTickCallback(function() 
	if myHero.level ~= DUtil.lastLevel then 
	local idx = cfg["autolevel"..myHero.charName]["level"..(myHero.level)]
	if (cfg["autolevel"..myHero.charName]["autolevel"..myHero.charName] ) and idx ~= 0 then 
		_G.LevelSpell(idx - 1)
	end
	DUtil.lastLevel = myHero.level 
	end
end)

end

DUtil.includeSkinChanger = function(cfg)
	DUtil.cfg = cfg
	cfg:addSubMenu("Skin Changer","skinChanger")
	cfg.skinChanger:addParam("doChange","Change",SCRIPT_PARAM_ONOFF,true)
	cfg.skinChanger:addParam("skin", "Current Skin", SCRIPT_PARAM_LIST, 1,skins[myHero.charName])
	DUtil.skinIdx = cfg.skinChanger.skin
	DUtil.changeSkin = cfg.skinChanger.doChange
	--print(DUtil.skinIdx .. " vs "..cfg.skinChanger.skin)
	SetSkin(myHero,cfg.skinChanger.doChange and DUtil.skinIdx or - 1)
	AddTickCallback(function()
			local currIdx= cfg.skinChanger.skin
			local change = cfg.skinChanger.doChange
			if (currIdx ~= DUtil.skinIdx) or ( change ~= DUtil.changeSkin) then 
			    SetSkin(myHero,cfg.skinChanger.doChange and currIdx or - 1)
				DUtil.skinIdx = currIdx
				DUtil.changeSkin = change
			end
	
	end)
	
	AddUnloadCallback(function()
		SetSkin(myHero,- 1)
	end)
end

DUtil.isInterruptable = function(spellName)
		return table.contains(DUtil.interruptables,spellName)
end

    logDL("Loaded")
	DUtil.allies = {}
	DUtil.enemies = {}
	 for i = 1, heroManager.iCount do
        local hero = heroManager:GetHero(i)
        if hero.team == myHero.team and hero.networkID ~= player.networkID then
			DUtil.allies[""..hero.networkID] = hero 
		elseif hero.team ~= myHero.team then
			DUtil.enemies[""..hero.networkID] = hero
		end
	end
	
class 'DSelector'
DSelector.PRIORITIES_VALS = {"EASIEST TO KILL","MOST ATTACKING ME","NEAREST","NEAREST to CURSOR","MOST AP","MOST AD"}
DSelector.PRIORITIES_DEBUF_VALS = {"MOST ATTACKING ME","NEAREST","NEAREST to CURSOR","MOST AP","MOST AD"}
DSelector.PRIORITIES = {EASIEST_TO_KILL = DSelector.PRIORITIES_VALS[1], MOST_ATTACKING_ME = DSelector.PRIORITIES_VALS[2], NEAREST = DSelector.PRIORITIES_VALS[3],NEAR_CURSOR = DSelector.PRIORITIES_VALS[4],MOST_AD = DSelector.PRIORITIES_VALS[5], MOST_AP = DSelector.PRIORITIES_VALS[6]}
DSelector.attackers = {} -- enemies attacking me + count of attacks 
DSelector.attacked = {} -- enemies attacked by allies + count of attacks
function DSelector:__init()
  self.cfg = nil
  self.enemyCount = 0
  self.target = nil
  self.selected = nil
  self.enemies = {}
  self.dragPos = nil
  self.overrideByOrbwalker = false
  self.overrideByScript = false
  for k,v in pairs(DUtil.enemies) do  self.enemyCount = self.enemyCount + 1 end
  self.x,self.y = (dLibSave and dLibSave.tsHUD) and dLibSave.tsHUD.x or 778,(dLibSave and dLibSave.tsHUD) and dLibSave.tsHUD.y or 615 -- center coords, use getsave
  local eIdx = 1
  for k,v in pairs(DUtil.enemies) do 
	self.enemies[eIdx] = v
	eIdx = eIdx + 1
  end
  
  AddProcessAttackCallback(function(unit,spell)
  if not unit or not spell or not spell.target then return end
  if DUtil.enemies[""..unit.networkID] and spell.target.isMe then
	local attacker = DSelector.attackers[""..unit.networkID]
	if not attacker then DSelector.attackers[""..unit.networkID] = {timer = DTimer(2500), attacks = 1} 
	else 	
		attacker.attacks = attacker.timer:isUp() and 0 or (attacker.attacks + 1)
		attacker.timer:reset(2500) 
	end
  elseif DUtil.allies[""..unit.networkID] and DUtil.enemies[""..spell.target.networkID] then
	local attacked = DSelector.attacked[""..spell.target.networkID]
	if not attacked then DSelector.attacked[""..spell.target.networkID] = {timer = DTimer(2500), attacks = 1} 
	else 	
		attacked.attacks = attacked.timer:isUp() and 0 or (attacked.attacks + 1)
		attacked.timer:reset(2500) 
	end
  end
 end)
 
  AddMsgCallback(function(iMsg, wParam)
  if not self.cfg.ts.showSelectorHUD then return end
  --print(iMsg..","..wParam)
  if iMsg == 513 then --left mouse btn press
	if self.sx then
		if GetCursorPos().x > self.sx and GetCursorPos().x < self.sx + self.halfW*2 and GetCursorPos().y < self.sy and GetCursorPos().y > self.sy - self.elementWidth then
			self.dragPos = Vector(GetCursorPos().x,GetCursorPos().y)
		elseif GetCursorPos().x > self.sx and GetCursorPos().x < self.sx + self.halfW*2 and GetCursorPos().y > self.sy and GetCursorPos().y < self.sy + self.hudHeight then
	--	print((GetCursorPos().y - self.sy)/self.elementWidth)
      local deselected = self.selected and self.selected.networkID  == self.enemies[math.ceil((GetCursorPos().y - self.sy)/self.elementWidth)].networkID
			if not deselected then 
        self.selected = self.enemies[math.ceil((GetCursorPos().y - self.sy)/self.elementWidth)] 
        self.target = self.selected
        end
			logDL(self.selected.charName.." has been "..(deselected and "deselected" or "selected as enemy target."))
      if deselected then
          self.selected = nil 
          self.target = nil
        end
		end
	end
		
  elseif iMsg == 514 then --left mouse btn release
		self.dragPos = nil
	    dLibSave.tsHUD = {x = self.x,y = self.y}
		dLibSave:Save()
		--print(self.x..","..self.y)
  elseif iMsg == 512 then -- mouse move
  	--print("yay")
	if self.dragPos then
 
		self.x = self.x + GetCursorPos().x - self.dragPos.x
		self.y = self.y + GetCursorPos().y - self.dragPos.y
		self.dragPos.x = GetCursorPos().x 
		self.dragPos.y = GetCursorPos().y
	end
  
  --[[  local newTarget = self:getTargetCustom(function(h1,h2) 
        local h1Dist,h2Dist = 99999,99999
        if h1 then h1Dist = GetDistanceSqr(h1,mousePos) end
        if h2 then h2Dist = GetDistanceSqr(h2,mousePos) end
        if (not h1Dist and not h2Dist) or (h1Dist > 10000 and h2Dist > 10000) then return nil 
        else
         return h1Dist < h2Dist and h1 or h2
        end
      end,true) 
    if self.selected and newTarget == self.target then self.target = nil elseif newTarget then self.target = newTarget end
	]]--
 end 
end)
end

function DSelector:include(cfg)
  --local args = table.pack(...)
  self.cfg = cfg
  cfg:addSubMenu("Target Selection","ts")
  cfg.ts:addParam("info1","* Use Forced HUD Selector to force a target",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("info2","selection over anything else. press a target on",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("info3","the HUD to select, press again to deselect *",SCRIPT_PARAM_INFO,"")
    cfg.ts:addParam("info13"," ",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("showSelectorHUD","Show Target Selector HUD",SCRIPT_PARAM_ONOFF,true)
  --cfg.ts:addParam("overrideByOrbwalker","Force Orbwalker's target",SCRIPT_PARAM_ONOFF,true)
  cfg.ts:addParam("break1","                         ",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("info4","     <<------------ Automatic Targeting ----------->>",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("break2","                         ",SCRIPT_PARAM_INFO,"")
 --[[ for i = 1, args.n do
    local spell  = args[i]
    local list = {"MOST ATTACKING ME","NEAREST","NEAR CURSOR" ,"MOST AP or AD", "MOST AP"}
    if spell.getDamage then table.insert(list,1,"EASIEST TO KILL") end
    cfg.ts:addParam(spell.binding.."Mode", spell.binding.." Mode", SCRIPT_PARAM_LIST, spell.priority or 1,list)     
  end]]--
  cfg.ts:addParam("info10",">>   Enemy Priority : 1[MOST] -> "..self.enemyCount.."[LEAST] :",SCRIPT_PARAM_INFO,"")
  for k,v in pairs(DUtil.enemies) do
	cfg.ts:addParam(v.charName.."priority",  v.charName , SCRIPT_PARAM_SLICE,1,1,self.enemyCount,0)
  end
    cfg.ts:addParam("info11"," ",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("info12",">>   Targeting Algorithm :",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("enemyAggressiveMode","Aggressive Targeting", SCRIPT_PARAM_LIST, 1, DSelector.PRIORITIES_VALS)   
 
  cfg.ts:addParam("enemyDebuffMode","Debuff Targeting", SCRIPT_PARAM_LIST, 1, DSelector.PRIORITIES_DEBUF_VALS) 

  --cfg.ts:addParam("assist","Force target to most-attacked by allies",SCRIPT_PARAM_ONOFF,true)

  cfg.ts:addParam("break3","                         ",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("info5","     ------------ Orbwalkers Compatibility -----------",SCRIPT_PARAM_INFO,"")
  cfg.ts:addParam("break4","                         ",SCRIPT_PARAM_INFO,"")
  --cfg.ts:addParam("forceTarget","Force target-selection on orbwalker ",SCRIPT_PARAM_ONOFF,false)
  --cfg.ts:addParam("overrideMode", "Mode", SCRIPT_PARAM_LIST, 1, { "Force script's target on orbwalker","Force orbwalker's target on script" })
  
 -- self.overrideByOrbwalker = cfg.ts.overrideByOrbwalker
 -- self.overrideByScript = cfg.ts.overrideByScript
end

function DSelector:getBestTarget(priority, spell, range)
      
  return self:getTargetCustom(  
    function(e1,e2)
      local distSqr1 = GetDistanceSqr(myHero,e1) - e1.boundingRadius 
      local distSqr2 = GetDistanceSqr(myHero,e2) - e2.boundingRadius
      local spellRangeSqr = (spell.range*spell.range) + (range and range*range or 0)
      
      if distSqr1 > spellRangeSqr and distSqr2 > spellRangeSqr then return nil
      elseif distSqr1 < spellRangeSqr and distSqr2 > spellRangeSqr then return e1
      elseif distSqr2 < spellRangeSqr and distSqr1 > spellRangeSqr then return e2 end
	  
	  --[[if cfg.ts.assist then 
	    if not DSelector.attacked[""..e1.networkID] and 
	  end]]--
	  if self.cfg.ts[e1.charName.."priority"] < self.cfg.ts[e2.charName.."priority"] then return e1
	  elseif self.cfg.ts[e1.charName.."priority"] > self.cfg.ts[e2.charName.."priority"] then return e2
      elseif priority == DSelector.PRIORITIES.EASIEST_TO_KILL then
          return e1.health - spell.getDamage(e1) < e2.health - spell.getDamage(e2) and e1 or e2
      elseif priority == DSelector.PRIORITIES.NEAREST then      
          return distSqr1 < distSqr2 and e1 or e2
      elseif priority == DSelector.PRIORITIES.MOST_ATTACKING_ME then
			if not DSelector.attackers[""..e1.networkID] and not DSelector.attackers[""..e2.networkID] then 
				if spell.getDamage then return (e1.health - spell.getDamage(e1) < e2.health - spell.getDamage(e2)) and e1 or e2
				else return distSqr1 < distSqr2 and e1 or e2 end
			elseif DSelector.attackers[""..e1.networkID] and not DSelector.attackers[""..e2.networkID] then return e1 
			elseif not DSelector.attackers[""..e1.networkID] and DSelector.attackers[""..e2.networkID] then return e2 end			
			return DSelector.attackers[""..e1.networkID].attacks > DSelector.attackers[""..e2.networkID].attacks and e1 or e2
	  elseif priority == DSelector.PRIORITIES.NEAR_CURSOR then
			return GetDistanceSqr(mousePos,e1) < GetDistanceSqr(mousePos,e2) and e1 or e2
	  elseif priority == DSelector.PRIORITIES.MOST_AD then
			return e1.ap > e2.ap and e1 or e2
	  elseif priority == DSelector.PRIORITIES.MOST_AP then
			return e1.totalDamage > e2.totalDamage and e1 or e2
	  end
 
      return nil
    end 
    ,true)
end

function DSelector:getTargetCustom(comparator,isEnemy)
  local bestChamp = nil
  for i = 1, heroManager.iCount do
    local hero = heroManager:GetHero(i)
    if hero and hero.valid and (not hero.dead) and hero.visible and (not DUtil.isInvulnerable(hero)) and ((isEnemy == true and hero.team ~= myHero.team) or (isEnemy == false and myHero.team == hero.team) or (isEnemy == nil and true))then 
        bestChamp = comparator(bestChamp or hero,hero)  
    end
  end
  self.target = bestChamp 
  return bestChamp-- or self.target
end

function DSelector:getTarget( spell ,range )
    local target = self.selected 
	if not target or GetDistanceSqr(target,myHero) > (spell.range*spell.range) + (range and range*range or 0) then 
		target = self:getBestTarget(spell.getDamage and DSelector.PRIORITIES_VALS[self.cfg.ts.enemyAggressiveMode] or DSelector.PRIORITIES_DEBUF_VALS[self.cfg.ts.enemyDebuffMode] ,spell,range)   
	end
	if target and target.visible then return target else return nil end
end

function DSelector:drawSelectorHUD(halfW,trans)
 self.halfW = halfW
 self.elementWidth = 20
 
self.hudHeight= self.elementWidth*self.enemyCount
self.sx,self.sy,self.ex,self.ey =  self.x - halfW, self.y - self.hudHeight/2, self.x + halfW,self.y - self.hudHeight/2
	DrawLine(self.sx,self.y,self.ex,self.y,self.hudHeight,DDraw.getTransColor(trans,"000000")) -- HUD Background
	DrawRectangle(self.sx, self.sy - self.elementWidth, self.halfW*2,self.elementWidth, DDraw.getTransColor("CC","000000")) -- title bar
	DrawText("Forced Target Selector",12,self.sx + 10,self.sy - self.elementWidth+ 5,DDraw.getTransColor("CC","FFFFFF"))
	local yOff = 0
	for k,v in pairs(DUtil.enemies) do
		if self.selected and self.selected.networkID == v.networkID then 
			 DrawRectangle(self.sx, self.sy + yOff, self.halfW*2,self.elementWidth, DDraw.getTransColor(trans,"F66666"))
		end
		DrawText(v.charName,14,self.sx + 10, self.sy + yOff + 5,DDraw.getTransColor(trans,"FFFFFF")) 
		yOff = yOff + self.elementWidth
	end
end

function DSelector:draw()
--[[
for k,v in pairs(DSelector.attackers) do
	local target = DUtil.enemies[k]
	DrawText3D("Attacks : "..(v.timer:isUp() and 0 or v.attacks),target.x,target.y,target.z,10,0xFFFFFFFF)
end

for k,v in pairs(DSelector.attacked) do
	local target = DUtil.enemies[k]
	DrawText3D("Attacked : "..(v.timer:isUp() and 0 or v.attacks),target.x,target.y+50,target.z,10,0xFFFFFFFF)
end
]]--
if self.cfg.ts.showSelectorHUD then self:drawSelectorHUD(80,"80") end
local target = self.target
if target and target.visible and (not target.dead) then DDraw.drawLFS(target.x,target.y,target.z, target.boundingRadius, 2, 0xFFFF0000, 2,false,false,2) end
end


class 'DHealthIndicator'

	DHealthIndicator.xOffsets = {
		['AniviaEgg'] = -0.1,
		['Darius'] = -0.05,
		['Jhin'] = 0.05,
		['Renekton'] = -0.05,
		['Sion'] = -0.05,
		['Thresh'] = -0.03,
	}
	DHealthIndicator.yOffsets = {['Jhin'] = 22,}

	DHealthIndicator.getRealBarPos = function(unit)
		local startPos = GetUnitHPBarPos(unit)
		local width = 103
		local barOff = GetUnitHPBarOffset(unit)
		return Vector(startPos.x + ((DHealthIndicator.xOffsets[unit.charName] or 0) * 140) - 65, startPos.y + (barOff.y * 53) + 3 - (DHealthIndicator.yOffsets[unit.charName] or 0)),width
	end
	 
	DHealthIndicator.draw = function(unit, ...)
		if not DDraw.cfg.drawing.drawHIndicator or not unit.visible or unit.dead then return end
		local wts = WorldToScreen(D3DXVECTOR3(unit.x,unit.y,unit.z))
		if not OnScreen(wts.x,wts.y) then return end
		local spells = table.pack(...)
		local pos,width = DHealthIndicator.getRealBarPos(unit)
		local totalDamage = 0
		local charSize = DDraw.cfg.drawing.hIndicatorSettings.size
		local txtHeight = DDraw.cfg.drawing.hIndicatorSettings.height
		local charWidth = charSize /2
		local charWidthHalf = charWidth /2
		local xOff = 0
		local lastDrawPosX = nil
		local lastNewPosX = nil
		for i = 1, spells.n do
		  local spell = spells[i]
		  local cdArg,rangeArg = false,false
		  if spell then
		  if DDraw.cfg.drawing.hIndicatorSettings.drawNotOnCD then cdArg = myHero:CanUseSpell(spell.idx) == READY
		  else cdArg = myHero:CanUseSpell(spell.idx) ~= 12 end
		  
		   if DDraw.cfg.drawing.hIndicatorSettings.drawInRange then rangeArg = GetDistanceSqr(unit,myHero) < spell.range*spell.range
		  else rangeArg = true end
		  
			if spell.getDamage and spell.range and cdArg and rangeArg then
				totalDamage = totalDamage + spell.getDamage(unit)
				dmgPerc = (100*totalDamage)/unit.health
				currHealthWidth = (unit.health*width)/unit.maxHealth
				local dmgXOff =  (dmgPerc*currHealthWidth)/100
				local newPosX = MAX(pos.x,pos.x + currHealthWidth - dmgXOff)
				local colorVal = width - currHealthWidth + dmgXOff
				local color = DDraw.getHeatColor(MIN(width,colorVal),0, width,255)
				local colorTrans = DDraw.getHeatColor(MIN(width,colorVal),0, width,DDraw.cfg.drawing.hIndicatorSettings.alpha)
				DrawLine(newPosX,pos.y,lastNewPosX and (lastNewPosX - 1) or (pos.x + currHealthWidth),pos.y,10,colorTrans)
				DrawLine(newPosX, pos.y + 3 , newPosX, pos.y - 10,1,color)
				DrawLine(newPosX - 1, pos.y + 3 , newPosX - 1, pos.y - 10 - 1,1,0xFF000000)
				xOff = lastDrawPosX and ((lastDrawPosX - newPosX > charWidth and 0 or (xOff + charWidth - (lastNewPosX - newPosX)))) or 0		
				DrawLine(newPosX, pos.y-10 , newPosX - xOff, pos.y - txtHeight,1,color)
				--DrawLine(newPosX - 1, pos.y-10 , newPosX - 1 - xOff, pos.y - 18,1,0xFF000000)
				DrawText(spell.binding,charSize, newPosX - xOff - charWidthHalf - 1, pos.y - (txtHeight  + 9),0xFF000000) 
				DrawText(spell.binding,charSize, newPosX - xOff - charWidthHalf, pos.y - (txtHeight + 10),color) 
		 
				lastNewPosX = newPosX
				lastDrawPosX = lastNewPosX - xOff
				end
			end
		end

	end
 
class "ScriptUpdate"
ScriptUpdate.updatingCount = 0
ScriptUpdate.updating = {}
function ScriptUpdate:__init(name,LocalVersion,UseHttps, Host, VersionPath, ScriptPath, SavePath, CallbackUpdate, CallbackNoUpdate, CallbackNewVersion,CallbackError)
    self.LocalVersion = LocalVersion
	ScriptUpdate.updatingCount = ScriptUpdate.updatingCount + 1
	self.idx = ScriptUpdate.updatingCount
	ScriptUpdate.updating[self.idx] = self.idx
	self.Name = name
    self.Host = Host
    self.VersionPath = '/BoL/TCPUpdater/GetScript'..(UseHttps and '5' or '6')..'.php?script='..self:Base64Encode(self.Host..VersionPath)..'&rand='..math.random(99999999)
    self.ScriptPath = '/BoL/TCPUpdater/GetScript'..(UseHttps and '5' or '6')..'.php?script='..self:Base64Encode(self.Host..ScriptPath)..'&rand='..math.random(99999999)
    self.SavePath = SavePath
    self.CallbackUpdate = CallbackUpdate
    self.CallbackNoUpdate = CallbackNoUpdate
    self.CallbackNewVersion = CallbackNewVersion
    self.CallbackError = CallbackError
    AddDrawCallback(function() self:OnDraw() end)
    self:CreateSocket(self.VersionPath)
    self.DownloadStatus = 'Connect to Server for VersionInfo'
	self.DownloadPerc = 0
    AddTickCallback(function() self:GetOnlineVersion() end)
end

function ScriptUpdate:print(str)
    print('<font color="#FFFFFF">'..os.clock()..': '..str)
end

function ScriptUpdate:OnDraw()
	if not ScriptUpdate.updating[self.idx] then return end
    if self.DownloadPerc ~= 100 then
	    local w,h,w2,h2 = 500,50,470,35
		local place = 0
		for k,v in pairs(ScriptUpdate.updating) do
			if v ~= nil then
				place = place + 1
				if k == self.idx then break end
			end
		end
		local x,y,x2,y2 =  WINDOW_W/2 - w/2,WINDOW_H/1.5 - place*(h + 35) - h/2, WINDOW_W/2 - w2/2,WINDOW_H/1.5 - place*(h + 35)- h2/2
		DrawRectangle(x,y,w,h,0xFFF374140)--ff6666
		DrawRectangle(x,y - 20,100,20,0xFFF374140)
		DrawText('DivineLib Updater',13,x + 4,y - 17,0xFF758A7F)
		DrawText('DivineLib Updater',13,x + 5,y - 17,0xFF758A7F)
		local currW2 = self.DownloadPerc*w2/100
		DrawRectangle(x2,y2,w2,h2,0xFF2A2C2B)
		DrawRectangle(x2,y2,currW2,h2,0xFFDC3522)
	
		--DrawText('Downloading '..self.Name.." "..(self.DownloadStatus and self.DownloadPerc or "?").."%",20,x - 1 + w/3,y-1 + h+10,0xFFF374140)
			DrawText('Downloading '..self.Name.." "..(self.DownloadStatus and self.DownloadPerc or "?").."%",20,x + w/3,y + h+10,0xFFD9CB9E)
    else
		ScriptUpdate.updating[self.idx] = nil
	end
	
end

function ScriptUpdate:CreateSocket(url)
    if not self.LuaSocket then
        self.LuaSocket = require("socket")
    else
        self.Socket:close()
        self.Socket = nil
        self.Size = nil
        self.RecvStarted = false
    end
    self.LuaSocket = require("socket")
    self.Socket = self.LuaSocket.tcp()
    self.Socket:settimeout(0, 'b')
    self.Socket:settimeout(99999999, 't')
    self.Socket:connect('sx-bol.eu', 80)
    self.Url = url
    self.Started = false
    self.LastPrint = ""
    self.File = ""
end

function ScriptUpdate:Base64Encode(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    return ((data:gsub('.', function(x)
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

function ScriptUpdate:GetOnlineVersion()
    if self.GotScriptVersion then return end

    self.Receive, self.Status, self.Snipped = self.Socket:receive(1024)
    if self.Status == 'timeout' and not self.Started then
        self.Started = true
        self.Socket:send("GET "..self.Url.." HTTP/1.1\r\nHost: sx-bol.eu\r\n\r\n")
    end
    if (self.Receive or (#self.Snipped > 0)) and not self.RecvStarted then
        self.RecvStarted = true
        self.DownloadStatus = 'Downloading VersionInfo (0%)'
    end

    self.File = self.File .. (self.Receive or self.Snipped)
    if self.File:find('</s'..'ize>') then
        if not self.Size then
            self.Size = tonumber(self.File:sub(self.File:find('<si'..'ze>')+6,self.File:find('</si'..'ze>')-1))
        end
        if self.File:find('<scr'..'ipt>') then
            local _,ScriptFind = self.File:find('<scr'..'ipt>')
            local ScriptEnd = self.File:find('</scr'..'ipt>')
            if ScriptEnd then ScriptEnd = ScriptEnd - 1 end
            local DownloadedSize = self.File:sub(ScriptFind+1,ScriptEnd or -1):len()
            self.DownloadStatus = 'Downloading VersionInfo ('..math.round(100/self.Size*DownloadedSize,2)..'%)'
			
        end
    end
    if self.File:find('</scr'..'ipt>') then
        self.DownloadStatus = 'Downloading VersionInfo (100%)'

        local a,b = self.File:find('\r\n\r\n')
        self.File = self.File:sub(a,-1)
        self.NewFile = ''
        for line,content in ipairs(self.File:split('\n')) do
            if content:len() > 5 then
                self.NewFile = self.NewFile .. content
            end
        end
        local HeaderEnd, ContentStart = self.File:find('<scr'..'ipt>')
        local ContentEnd, _ = self.File:find('</sc'..'ript>')
        if not ContentStart or not ContentEnd then
            if self.CallbackError and type(self.CallbackError) == 'function' then
                self.CallbackError()
            end
        else
            self.OnlineVersion = (Base64Decode(self.File:sub(ContentStart + 1,ContentEnd-1)))
            self.OnlineVersion = tonumber(self.OnlineVersion)
            if self.OnlineVersion > self.LocalVersion then
                if self.CallbackNewVersion and type(self.CallbackNewVersion) == 'function' then
                    self.CallbackNewVersion(self.OnlineVersion,self.LocalVersion)
                end
                self:CreateSocket(self.ScriptPath)
                self.DownloadStatus = 'Connect to Server for ScriptDownload'
                AddTickCallback(function() self:DownloadUpdate() end)
            else
                if self.CallbackNoUpdate and type(self.CallbackNoUpdate) == 'function' then
                    self.CallbackNoUpdate(self.LocalVersion)
                end
            end
        end
        self.GotScriptVersion = true
    end
end

function ScriptUpdate:DownloadUpdate()
    if self.GotScriptUpdate then return end
    self.Receive, self.Status, self.Snipped = self.Socket:receive(1024)
    if self.Status == 'timeout' and not self.Started then
        self.Started = true
        self.Socket:send("GET "..self.Url.." HTTP/1.1\r\nHost: sx-bol.eu\r\n\r\n")
    end
    if (self.Receive or (#self.Snipped > 0)) and not self.RecvStarted then
        self.RecvStarted = true
        self.DownloadStatus = 'Downloading Script (0%)'
    end

    self.File = self.File .. (self.Receive or self.Snipped)
    if self.File:find('</si'..'ze>') then
        if not self.Size then
            self.Size = tonumber(self.File:sub(self.File:find('<si'..'ze>')+6,self.File:find('</si'..'ze>')-1))
        end
        if self.File:find('<scr'..'ipt>') then
            local _,ScriptFind = self.File:find('<scr'..'ipt>')
            local ScriptEnd = self.File:find('</scr'..'ipt>')
            if ScriptEnd then ScriptEnd = ScriptEnd - 1 end
            local DownloadedSize = self.File:sub(ScriptFind+1,ScriptEnd or -1):len()
            self.DownloadStatus = 'Downloading Script ('..math.round(100/self.Size*DownloadedSize,2)..'%)'
			self.DownloadPerc = FLOOR(100/self.Size*DownloadedSize,2)
        end
    end
    if self.File:find('</scr'..'ipt>') then
        self.DownloadStatus = 'Downloading Script (100%)'
		self.DownloadPerc = 100
        local a,b = self.File:find('\r\n\r\n')
        self.File = self.File:sub(a,-1)
        self.NewFile = ''
        for line,content in ipairs(self.File:split('\n')) do
            if content:len() > 5 then
                self.NewFile = self.NewFile .. content
            end
        end
        local HeaderEnd, ContentStart = self.NewFile:find('<sc'..'ript>')
        local ContentEnd, _ = self.NewFile:find('</scr'..'ipt>')
        if not ContentStart or not ContentEnd then
            if self.CallbackError and type(self.CallbackError) == 'function' then
                self.CallbackError()
            end
        else
            local newf = self.NewFile:sub(ContentStart+1,ContentEnd-1)
            local newf = newf:gsub('\r','')
            if newf:len() ~= self.Size then
                if self.CallbackError and type(self.CallbackError) == 'function' then
                    self.CallbackError()
                end
                return
            end
            local newf = Base64Decode(newf)
            if type(load(newf)) ~= 'function' then
                if self.CallbackError and type(self.CallbackError) == 'function' then
                    self.CallbackError()
                end
            else
                local f = io.open(self.SavePath,"w+b")
                f:write(newf)
                f:close()
                if self.CallbackUpdate and type(self.CallbackUpdate) == 'function' then
                    self.CallbackUpdate(self.OnlineVersion,self.LocalVersion)
                end
            end
        end
        self.GotScriptUpdate = true
    end
end


AddLoadCallback(function()
--update self
ScriptUpdate(
		"DivineLib",
		DInfo.VERSION,
		DInfo.SSL,
		DInfo.HOST_URL, 
		"/Nader-Sl/BoLStudio/master/Versions/DivineLib.version", 
		"/Nader-Sl/BoLStudio/master/Scripts/DivineLib.lua", 
		LIB_PATH.."DivineLib.lua", 
		function() 
			logDL("Updated to latest version, please restart script (F9 F9)")
		end, 
		function()   end, --load complete
		function() logDL("A new version found, attempting to download ...")  end, --new version
		function() logDL('An Error Occured during DivineLib update, please restart the script (F9 x F9)') end
	)

--vpred download
if FileExist(LIB_PATH .. "VPrediction.lua") then 
	require ("VPrediction")
	DPredictions.vPred = VPrediction()
	DPredictions.loadedPredLibs.vpred = true
else
ScriptUpdate(
		"VPrediction",
		0,
		true,
		DInfo.HOST_URL, 
		"/Nader-Sl/BoLStudio/master/Versions/versiondummy.version", 
		"/SidaBoL/Scripts/master/Common/VPrediction.lua", 
		LIB_PATH.."VPrediction.lua", 
		function() 
			require ("VPrediction")
			DPredictions.vPred = VPrediction()
			DPredictions.loadedPredLibs.vpred = true
		end, 
		function()   end, --load complete
		function()   end, --new version
		function() logDL('An Error Occured during VPrediction download, please restart the script (F9 x F9)') end
	)
end
--[[
--menu config (new) 
if FileExist(LIB_PATH .. "MenuConfig.lua") then 
	assert(load(ReadFile(LIB_PATH.."MenuConfig.lua"), "MenuConfig", "t", _ENV))()
			ScriptUpdate.menuConfigLoaded = true
else
ScriptUpdate(
		"New BoL MenuConfig",
		0,
		true,
		DInfo.HOST_URL, 
		"/Nader-Sl/BoLStudio/master/Versions/versiondummy.version", 
		"/linkpad/BoL/master/Common/MenuConfig.lua", 
		LIB_PATH.."MenuConfig.lua", 
		function() 
			assert(load(ReadFile(LIB_PATH.."MenuConfig.lua"), "MenuConfig", "t", _ENV))()
			ScriptUpdate.menuConfigLoaded = true
		end, 
		function()   end, --load complete
		function()   end, --new version
		function() print('An Error Occured in during New MenuConfig download, Will switch to default MenuConfig.') end
	)
end]]--
--[[
ScriptUpdate(
		DInfo.NAME,
		DInfo.VERSION ,
		DInfo.SSL,
		DInfo.HOST_URL, 
		DInfo.VERSION_PATH, 
		DInfo.SCRIPT_PATH, 
		DInfo.SAVE_PATH, 
		function() print('Update Complete. Reload(F9 F9)') end, 
		function() print('Load Complete') end, 
		function() print('New version found') end, 
		function() print('An Error Occured in Update.') end
	)
	ScriptUpdate(
		"Divine Prediction",
		DInfo.VERSION ,
		DInfo.SSL,
		DInfo.HOST_URL, 
		DInfo.VERSION_PATH, 
		"/PewPewPew2/BoL/master/DancingShoes.lua",
		DInfo.SAVE_PATH, 
		function() print('Update Complete. Reload(F9 F9)') end, 
		function() print('Load Complete') end, 
		function() print('New version found') end, 
		function() print('An Error Occured in Update.') end
	)
	ScriptUpdate(
		"DancingShoes",
		DInfo.VERSION ,
		DInfo.SSL,
		DInfo.HOST_URL, 
		DInfo.VERSION_PATH, 
		"/PewPewPew2/BoL/master/DancingShoes.lua", 
		DInfo.SAVE_PATH, 
		function() print('Update Complete. Reload(F9 F9)') end, 
		function() print('Load Complete') end, 
		function() print('New version found') end, 
		function() print('An Error Occured in Update.') end
	)
		ScriptUpdate(
		"sxOrbWalk",
		DInfo.VERSION ,
		DInfo.SSL,
		DInfo.HOST_URL, 
		DInfo.VERSION_PATH, 
		"/Superx321/BoL/master/common/SxOrbWalk.lua", 
		DInfo.SAVE_PATH, 
		function() print('Update Complete. Reload(F9 F9)') end, 
		function() print('Load Complete') end, 
		function() print('New version found') end, 
		function() print('An Error Occured in Update.') end
	)]]--
end)
"),FILE_NAME, "bt", _ENV)()